{"ast":null,"code":"import { fetchTasks } from '../actions';\nimport { ADD_TASK, FETCH_TASKS_FAILURE, FETCH_TASKS_REQUEST, FETCH_TASKS_SUCCESS, SET_BORDER_COLOR } from '../actions/actionTypes';\nconst initialState = {\n  isFetching: false,\n  error: null,\n  data: [],\n  bordeCrolor: false\n};\n\nconst reducer = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case FETCH_TASKS_REQUEST:\n      return { ...state,\n        isFetching: true\n      };\n\n    case FETCH_TASKS_SUCCESS:\n      return { ...state,\n        isFetching: false,\n        data: action.data\n      };\n\n    case FETCH_TASKS_FAILURE:\n      return { ...state,\n        isFetching: false,\n        error: action.error\n      };\n\n    default:\n      return { ...state,\n        data: tasks(state.data, action)\n      };\n  }\n};\n\nconst tasks = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_TASK:\n      return [...state, {\n        id: action.id,\n        text: action.text,\n        stateText: action.statusText\n      }];\n\n    default:\n      return state;\n  }\n};\n\nconst setBorderColor = function () {\n  let state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  let action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case SET_BORDER_COLOR:\n      return { ...state,\n        bordeCrolor: true\n      };\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["F:/DataReachble/data-reachable/src/reducers/task.js"],"names":["fetchTasks","ADD_TASK","FETCH_TASKS_FAILURE","FETCH_TASKS_REQUEST","FETCH_TASKS_SUCCESS","SET_BORDER_COLOR","initialState","isFetching","error","data","bordeCrolor","reducer","state","action","type","tasks","id","text","stateText","statusText","setBorderColor"],"mappings":"AAAA,SAASA,UAAT,QAA2B,YAA3B;AACA,SACEC,QADF,EACYC,mBADZ,EACiCC,mBADjC,EACsDC,mBADtD,EAC2EC,gBAD3E,QAEO,wBAFP;AAIA,MAAMC,YAAY,GAAG;AACnBC,EAAAA,UAAU,EAAE,KADO;AAEnBC,EAAAA,KAAK,EAAE,IAFY;AAGnBC,EAAAA,IAAI,EAAE,EAHa;AAInBC,EAAAA,WAAW,EAAE;AAJM,CAArB;;AAOA,MAAMC,OAAO,GAAG,YAAkC;AAAA,MAAjCC,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AAChD,UAAOA,MAAM,CAACC,IAAd;AACE,SAAKX,mBAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELL,QAAAA,UAAU,EAAE;AAFP,OAAP;;AAIF,SAAKH,mBAAL;AACE,aAAO,EACL,GAAGQ,KADE;AAELL,QAAAA,UAAU,EAAE,KAFP;AAGLE,QAAAA,IAAI,EAAEI,MAAM,CAACJ;AAHR,OAAP;;AAKF,SAAKP,mBAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELL,QAAAA,UAAU,EAAE,KAFP;AAGLC,QAAAA,KAAK,EAAEK,MAAM,CAACL;AAHT,OAAP;;AAKF;AACE,aAAO,EACL,GAAGI,KADE;AAELH,QAAAA,IAAI,EAAEM,KAAK,CAACH,KAAK,CAACH,IAAP,EAAaI,MAAb;AAFN,OAAP;AAnBJ;AAwBD,CAzBD;;AA2BA,MAAME,KAAK,GAAG,YAAwB;AAAA,MAAvBH,KAAuB,uEAAf,EAAe;AAAA,MAAXC,MAAW;;AACpC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKb,QAAL;AACE,aAAO,CACL,GAAGW,KADE,EAEL;AACEI,QAAAA,EAAE,EAAEH,MAAM,CAACG,EADb;AAEEC,QAAAA,IAAI,EAAEJ,MAAM,CAACI,IAFf;AAGEC,QAAAA,SAAS,EAAEL,MAAM,CAACM;AAHpB,OAFK,CAAP;;AAQF;AACA,aAAOP,KAAP;AAXF;AAaD,CAdD;;AAgBA,MAAMQ,cAAc,GAAG,YAAkC;AAAA,MAAjCR,KAAiC,uEAAzBN,YAAyB;AAAA,MAAXO,MAAW;;AACvD,UAAQA,MAAM,CAACC,IAAf;AACE,SAAMT,gBAAN;AACE,aAAO,EACL,GAAGO,KADE;AAELF,QAAAA,WAAW,EAAE;AAFR,OAAP;AAFJ;AAOD,CARD;;AAUA,eAAeC,OAAf","sourcesContent":["import { fetchTasks } from '../actions';\r\nimport { \r\n  ADD_TASK, FETCH_TASKS_FAILURE, FETCH_TASKS_REQUEST, FETCH_TASKS_SUCCESS, SET_BORDER_COLOR\r\n} from '../actions/actionTypes';\r\n\r\nconst initialState = {\r\n  isFetching: false,\r\n  error: null,\r\n  data: [],\r\n  bordeCrolor: false\r\n}\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  switch(action.type) {\r\n    case FETCH_TASKS_REQUEST:\r\n      return {\r\n        ...state,\r\n        isFetching: true\r\n      }\r\n    case FETCH_TASKS_SUCCESS:\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        data: action.data\r\n      }\r\n    case FETCH_TASKS_FAILURE:\r\n      return {\r\n        ...state,\r\n        isFetching: false,\r\n        error: action.error\r\n      }\r\n    default:\r\n      return {\r\n        ...state,\r\n        data: tasks(state.data, action)\r\n      }\r\n  }\r\n}\r\n\r\nconst tasks = (state = [], action) => {\r\n  switch (action.type) {\r\n    case ADD_TASK:\r\n      return [\r\n        ...state,\r\n        {\r\n          id: action.id,\r\n          text: action.text,\r\n          stateText: action.statusText\r\n        }\r\n      ]\r\n    default: \r\n    return state\r\n  }\r\n}\r\n\r\nconst setBorderColor = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case  SET_BORDER_COLOR:\r\n      return {\r\n        ...state,\r\n        bordeCrolor: true\r\n      }\r\n  }\r\n}\r\n\r\nexport default reducer"]},"metadata":{},"sourceType":"module"}